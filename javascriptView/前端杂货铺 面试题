
https://zhuanlan.zhihu.com/p/22177711

JavaScript 中 this 是如何工作的 ？
先来看看这个题目：


var x = 0;
var foo = {
    x:1,
    bar:{
    x:2,
    baz: function () {
       console.log(this.x)
     }
    }
}

var a = foo.bar.baz
foo.bar.baz() // 2
a() //0
this 永远指向函数运行时所在的对象，而不是函数创建时所在的对象
匿名函数和不处于任何对象中的函数，This指向window
call, apply, with指的This是谁就是谁。
普通函数调用，函数被谁调用，This就指向谁
上面的例子中，baz被bar调用所以指向的指bar. a 运行时所在的对象是 window,所以指向的是window。

作用域链?
理解执行环境和上下文

函数调用都有与之相关的作用域和上下文。从根本上说，作用域是基于函数(function-based)而上下文是基于对象(object-based)。换句话说，作用域是和每次函数调用时变量的访问有关，并且每次调用都是独立的。上下文总是关键字 this 的值，是调用当前可执行代码的对象的引用。

执行上下文分有global、function、eval，一个函数可以产生无数个执行上下文，一系列的执行上下文从逻辑上形成了 执行上下文栈，栈底总是全局上下文，栈顶是当前（活动的）执行上下文。

执行上下文三属性：this指针，变量对象（数据作用域），作用域链

作用域链 即：一变量在自己的作用域中没有，那么它会寻找父级的，直到最顶层。过程如下：

任何在执行上下文时刻的作用域都由作用域链来实现
在一个函数被定义的时候, 会将它定义时刻的scope chain链接到这个函数对象的[[scope]]属性
在一个函数对象被调用的时候，会创建一个活动对象(也就是一个对象), 然后对于每一个函数的形参，都命名为该活动对象的命名属性, 然后将这个活动对象做为此时的作用域链(scope chain)最前端, 并将这个函数对象的[[scope]]加入到scope chain中.

上面的文字大家可以好好琢磨一下，可以更好的理解函数作用域。

函数声明提升和变量声明提升(Hoisting) ？
我们先来了解js编译器在执行代码的过程：
以执行一段function代码为例：
第一步：创建可执行上下文（以下简称为EC），压入当前的EC栈中。EC中包括了以下信息：

词法环境（=环境记录项（保存变量、函数声明和形参）+ 外部词法环境（function的[[scope]]属性，作用域链的本质））
this的指针
变量环境（与环境记录项的值相同，但不再发生变动。）

第二步：收集函数声明、变量声明和形参，保存在环境记录项内。这个收集的过程，就是一般所谓的声明提升现象的本质。如果发现了重复的标识符，则优先级为函数声明 、形参 、变量声明（优先级低的会被无视）。

第三步：开始执行代码，环境记录项内没有的标识符会根据作用域链查找标识符对应的值，环境记录项亦有可能因赋值语句而被修改。

第四步：函数执行完毕，EC栈被弹出、销毁。

好了，第二步说的很清楚了 声明提升(Hoisting)现象就是在收集函数、变量声明和形参的过程会根据函数声明、形参、变量声明的顺序优先级来收集。

例子：


var a = 1;  
function b() {  
    a = 10;  
    return;  
    function a() {}  
}  
b();  
console.log(a); 
// 输出1 由于函数声明提升，b内的实际是这样：
// function b() {  
//    function a() {}; 这里是函数声明提升
//    a = 10;  
//    return;  
//    function a() {}  
// }
理解了吗？
勘误：谢谢github上有同学的指正关于博客中的一个问题 · Issue #1 · stephenzhao/hexo-theme-damon，上面的正确执行应该为先进行预编译，所以先执行function a(){}，然后会进行对a的赋值操作。
//正确的顺序应该为：
// function b() {  
//    function a() {}  
//    a = 10;  
//    return;  
// }

什么是闭包，如何使用它，为什么要使用它？
还是上面的题目，做个变形。


var x = 0;
var foo = {
    x:1,
    bar:function () {
        console.log(this.x);
        var that = this;
        return function () {
           console.log(this.x)
           console.log(that.x)
        }
    }
}


foo.bar()       // 1
foo.bar()()     // this: 0, that: 1
上面的例子中ba'r里面返回了一个匿名函数，这个匿名函数可以在外部被调用即：foo.bar()() 读取到了bar的执行上下文的变量对象 that，这个函数就形成了一个闭包。

好了，我们理解了上面的套路，下面来解释闭包就好理解了。

闭包就是能够读取其它函数内部变量的函数

在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”


var x = 0;
var bar:function () {
        var n = 999;
        return function () {
           return n;
        }
    }
var outer = bar();
outer() // 999
用途：

读取函数内部的变量
让这些变量的值始终保持在内存中
我们修改一下上面的代码


var add;
var bar = function () {
        var n = 999;
        add = function () {
            n += 1;
        }
        return function () {
           return n;
        }
    }
var outer = bar();
outer() // 999 
add();
outer(); // 1000
说明，n一直保存在内存当中，而没有在bar()执行完成之后被销毁；
原因：
bar里面的匿名函数被赋值给了outer，这个导致在outer没有被销毁的时候，该匿名函数一直存在内存当中，而匿名函数的存在依赖于bar，所以bar需要使用都在内存当中，所以bar并不会在调用结束后呗垃圾回收机制给收回。

而上面的add接受的也是一个匿名函数，该匿名函数本身也是闭包，所以也可以在外部操作里面的变量。

注意点

会导致内存泄漏，慎用
闭包会修改内部变量的值，所以在使用闭包作为对象的公用方法时要谨慎。
闭包的一个应用，单例模式
单例模式的定义是产生一个类的唯一实例

单例模式在js中经常会遇到，比如 var a = {}; 其实就是一个单例子。

但是我们写一个更有意义的单例：


var singleton = function( fn ){
    var result;
    return function(){
        return result || ( result = fn .apply( this, arguments ) );
    }
}
更简洁一点的：


var singleton = (function () {
    var instance;
    return function (object) {
        if(!instance){
            instance = new object();
        }
        return instance;
    }
    })();
    
    
在JavaScript中一切都是对象吗？
“一切皆对象！” 大家都对此深信不疑。其实不然，这里面带有很多的语言陷阱，还是不要到处给别人吹嘘一切皆对象为好。


数据类型
JavaScript 是一种弱类型或者说动态语言。这意味着你不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。这也意味着你可以使用同一个变量保存不同类型的数据，最新的 ECMAScript 标准定义了 7 种数据类型:

基本类型

Boolean
Null
Undefined
Number
String
Symbol (ECMAScript 6 新定义)
对象类型

Object
对象类型涵盖了很多引用类型，任何非基本类型的都是对象类型。如Function(函数Function 是一个附带可被调用功能的常规对象)，这里就不在赘述。

根据这个分类可以看出“并非一切接对象”。

我们可以从两方面来区别这两种类型：

区别
可变性

基本类型：不可变类型，无法添加属性；即使添加属性，解析器无法再下一步读取它；


var cat = "cat";
cat.color = "black";
cat.color // undefined
对象类型：可变类型，支持添加和删除属性。

比较和传递

基本类型：按值比较，按值传递；
对象类型：按引用比较，按引用传递。


// 基本类型
var cat = "tom";
var dog = "tom";
cat === dog // true
//对象类型
var cat = {name:"tom"};
var dog = {name:"tom"};
cat === dog //false
我们说的通过引用进行对象比较是:两个对象的值是否相同取决于它们是否指向相同的底层对象 __David Flanagan

所以我们改成这样：


var cat = {name:"tom"}
var dog = cat;
b.name = "Haba"

dog === cat // true
如何检测对象类型？或者怎么检测一个数据是数组类型？
检测一个对象的类型，强烈推荐使用 Object.prototype.toString 方法； 因为这是唯一一个可依赖的方式。 我们使用Object.prototype.toString方法:


Object.prototype.toString.call([])    // "[object Array]"
Object.prototype.toString.call({})    // "[object Object]"
Object.prototype.toString.call(2)    // "[object Number]"
为什么不能用typeOf ？

typeof只有在基本类型的检测上面才好使，在引用类型(Function除外)里面他返回的都是object，另 typeof null === "object".

简谈面向对象
“面向对象编程（OOP）” 是目前主流的编程范式，其核心思想是将真实世界中各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。

对象是单个实物的抽象，一本书，一只猫，一个人都可以是对象。从语言的角度对象就是一个容器封装了属性和方法。

典型面向对象的两大概念：类和 实例

类：对象的类型模板
实例：根据类创建的对象
很遗憾JavaScript没有类的概念，但它使用构造函数（constructor）作为对象的模板。


//构造函数
var Pet = function (name, language) {
    this.name = name;
    this.say = function () {
        console.log(language);
    }
}
// new 关键字生成对象 有关new操作符我们在后面会讲到。
var cat = new Pet('tom', 'meow');
cat.name // tom
cat.say() // meow
new创建一个对象都进行了哪些操作？
new用于新建一个对象，例如：


function Pet () {}
var tom = new Pet();
new进行了如下操作：

创建一个空对象，用this 变量引用该对象并继承该函数的原型
属性和方法加入到this的引用对象中
新创建的对象由this所引用，并且最后隐式的返回this
模拟过程：
function newObj(Fun,arguments) {
    var o = {};
    if (Fun && typeof Fun === "function") {
        o.__proto__ = Fun.prototype;
        Fun.apply(o, arguments);
        return o;
    }
}
这里需要注意的是，构造函数内部有return语句的情况。如果return 后面跟着一个对象，new命令返回return指定的对象；否则不管return语句直接返回this.


var Pet = function (name) {
    this.name = name;
    return {notInstance:"blabla"}
}
var cat = new Pet('tom');
cat.name // undefined
cat.notInstance // blabla
阐述原型链？js如何实现继承？
上面的讲到的构造函数，实例对象的属性和方法都在构造函数内部实现。这样的 构造函数有一个缺点：


var cat1 = new Pet('tom', 'meow');
var cat2 = new pet('jery', 'meow');

cat1.say === cat2.say // false
生成两只猫 叫声一样，但是猫的say方法是不一样的，就是说每新建一个对象就生成一个新的say方法。所有的say方法都是同样的行为，完全可以共享。
JavaScript的原型（prototype）可以让我们实现共享。

原型链 ？
JavaScrip可以采用构造器(constructor)生成一个新的对象,每个构造器都拥有一个prototype属性,而每个通过此构造器生成的对象都有一个指向该构造器原型(prototype)的内部私有的链接(proto),而这个prototype因为是个对象,它也拥有自己的原型,这么一级一级直到原型为null,这就构成了原型链.

原型链的工作原理：


function getProperty(obj, prop) {
    if (obj.hasOwnProperty(prop)) //首先查找自身属性,如果有则直接返回
        return obj[prop]
    else if (obj.__proto__ !== null)
        return getProperty(obj.__proto__, prop) //如何不是私有属性,就在原型链上一步步向上查找,直到找到,如果找不到就返回undefind
    else
        return undefined
}
如果跟着原型链一层层的寻找，所有对象都可以寻找到最顶层，Object.prototype, 即Object的构造函数的prototype属性，而Object.prototype对象指向的就是没有任何属性和方法的null对象。


Object.getPrototypeOf(Object.prototype)
// null
原型链表明了一个对象查找他的属性的过程：首先在对象本身上面找 -> 没找到再到对象的原型上找 ->还是找不到就到原型的原型上找 —>直到Object.prototype找不到 -> 返回undefined。（在这种查找中找到就立刻返回）。

constructor 属性
prototype对象有一个constructor属性，默认指向prototype对象所在的构造函数。
由于constructor属性是一种原型对象与构造函数的关联关系，所以修改原型对象的时候，务必要小心。


var Pet = function (name) {
    this.name = name;
}
// 尽量避免这么写，因为会把construct属性覆盖掉。
Pet.prototype = {
    say: function () {
        console.log('meow');
    }
}

// 如果我们覆盖了constructor属性要记得将他指回来。
Pet.prototype.constructor = Pet;
__proto__ 属性和prototype属性的区别
prototype是function对象中专有的属性。
__proto__是普通对象的隐式属性，在new的时候，会指向prototype所指的对象；
__proto__实际上是某个实体对象的属性，而prototype则是属于构造函数的属性。
__proto__只能在学习或调试的环境下使用。

这里抓住两点：

构造函数通过 prototype 属性访问原型对象
实例对象通过 [[prototype]] 内部属性访问原型对象，浏览器实现了 __proto__属性用于实例对象访问原型对象
Object 为构造函数时，是Function的实例对象；Function为构造函数时，Function.prototype 是对象，那么他就是Object的实例对象。

来看一个题目：


var F = function(){};
Object.prototype.a = function(){};
Function.prototype.b = function(){};
var f = new F();
// f 能取到a,b吗？原理是什么？
根据原型链的关系：

f是F的实例对象，其原型链：


f.__proto__ -> [F prototype].__proto__ -> [Object prototype].__proto__ -> null
F是构造函数，是Function的实例，他的原型链：


F.__proto__ -> [Function prototype].__proto__ -> [Object prototype].__proto__ -> null
由此，只有F能够访问到Function的prototype,答案就是：“f只能a,但是F可以访问a,b”

原型继承
原型继承是借助已有的对象创建新的对象，将子类的原型指向父类，就相当于加入了父类这条原型链。

function Animal(){
    this.super = 'animal';
}
function Cat(name) {
    this.name = name;
    this.food = 'fish';
}
Cat.prototype = new Animal(); // Cat 继承了Animal
Cat.prototype.getFood = function () {
    return this.food;
}
上面的方法中constructor指向有点问题：


var cat = new Cat('tom');
cat.name // tom
cat.super // animal
cat.getFood() // fish
//but
cat.constructor === Cat //false
cat.constructor === Animal //true
cat 的constructor 并没有指向Cat而是指向了父类Animal。我们需要对它进行修正:


function Cat(name){
    this.name = name;
    this.food = 'fish';
}
Cat.prototype = new Animal();
Cat.prototype.constructor = Cat;
Cat.prototype.getFood = function () {
    return this.food;
}
好了上面就实现了一个简单的原型继承。

总结
js的灵活性造就了实现继承的多样性，或者说因为他没有真正的类和继承，我们可以利用很多中方式来模拟它。原型继承是最有js特色的一直实现方式，也是使用最多的方式。
关于面向对象，我想说js “几乎一切皆对象”，因为有原型链的存在我们能实现类似其他语言的继承。
