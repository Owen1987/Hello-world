拷贝：浅拷贝  深拷贝
继承：使用父的东西或引用父的东西
    1.子复制父的东西
    2.子链接到父
1.字面量函数实现拷贝    
 浅拷贝   
 var person ={
	name:"cj",
 	age:22,
 	address:{
 		home:"home address",
 		office:"office address"

 	},
 	schools:["xiaoxue","daxue"]

 };
 var programer = {
 	language:"javascript"
 };

 function  extend (p,c) {
      var c = c ||{};
      for(var prop in p){
        c[prop] = p[prop];
      }
 }
 测试：extend(person,programer);
         programer.name;//"cj"
         programer.age;//22
         
         programer.address.home="ganzhou";
         person.address.home;//ganzhou 说明引用类型时候，浅拷贝改变子，父也会改变，解决此问题 需要用深拷贝（递归）
深拷贝：使用递归
 function extendDeeply(p,c){
    	var c = c|| {};
 	  for(var prop in p){
		if(typeof p[prop] === "object"){
 			c[prop] = (p[prop].constructor ===Array)?[]:{};
 			extendDeeply(p[prop],c[prop]);
			
 		}else{
 			c[prop] = p[prop];
		}

 	}
 }

2.构造器函数实现拷贝--call
    function Parent(){
    	this.name = "abc";
    	this.address = {home:"home"};
   }
    function Child(){
    	 Parent.call(this);
   	   this.language = "java";
    }

-------create实现继承-------
		---浏览器自带的继承create----
		   用法1var chid= Obeject.create(parent)
		   用法2：var chid = Obeject.create(parent,{age:{value:20},salary:{value:1000}}
		   实现原理：
	var p ={name:"cj"};
//Douglas Crockford  
	function myCreate(p){
		var ins ;
		function F(){};
		F.prototype = p;
		ins =  new F();
		return ins ;
	}
//对象的__proto__ 指向的是对象的构造器constructor的原型对象（prototype）
  ff=new FF();
  ff.__proto__===FF.prototype;//true 
   ff.__proto__=ff.constructor.prototype;//true
//但原型对象并不是能用上面的话来说明
//原型对象的__proto__指向的是Object得prototype而不是指向其(Object.prototype)构造器constructor ==某个函数的原型对

