<script type="text/javascript">
 //通过拷贝继承
//1.js的浅拷贝，但父对象（为引用类型） 里的属性包含对象时，浅拷贝出来的子对象重新定义值，会改变父对象的值，不能做到 子不能影响父
//父
// var person ={
// 	name:"cj",
// 	age:22,
// 	address:{//引用类型
// 		home:"home address",
// 		office:"office address"

// 	},
// 	schools:["xiaoxue","daxue"] //引用类型
	

// };
//子
// var programer = {
// 	language:"javascript"
// };

// function  extend (p,c) {
// 	var c = c ||{};
// 	for(var prop in p){
// 		c[prop] = p[prop];
// 	}

// }
    问题：extend（person,programer）;  programer.address.home="jiangxi" 此时 person.address.home   ="jiangxi" ,  因为父与子都是指向应用类型的对象
                               programer.schools[0]="aaaa" 此时person.school[0]  ="aaaa"      数组也是引用类型，父子会影响，
//2.深拷贝   利用递归解决浅拷贝的问题
// function extendDeeply(p,c){
// 	var c = c|| {};
// 	for(var prop in p){
// 		if(typeof p[prop] === "object"){
// 			c[prop] = (p[prop].constructor ===Array)?[]:{};
// 			extendDeeply(p[prop],c[prop]);
			
// 		}else{
// 			c[prop] = p[prop];
// 		}

// 	}
// }

//构造函数实现 拷贝，不存在深拷贝和浅拷贝的问题，
//    function Parent(){
//    	this.name = "abc";
//    	this.address = {home:"home"};
//    }
//    function Child(){
//    	 Parent.call(this);
//    	 this.language = "java";
//    }
  //测试var c=new Chid();   c.address.home="bbbbb" 此时 var p=new Parent(); p.address.home   ="home"
 
	var p ={name:"cj"};
//Douglas Crockford  
	function myCreate(p){
		var ins ;
		function F(){};
		F.prototype = p;
		ins =  new F();
		return ins ;
	}
//对象的__proto__ 指向的是
//对象的构造器constructor
//的原型对象（prototype）

//但原型对象并不是能用上面的话来说明
//原型对象的__proto__指向的是Object得prototype
//而不是指向
//其(Object.prototype)构造器constructor ==某个函数
//的原型对象

   
</script>
