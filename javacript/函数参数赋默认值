为函数的参数指定默认值
ES5：----使用||： y = y || 'World';
function log(x, y) {
  y = y || 'World';
  if (typeof y === 'undefined') {
  y = 'World';
}
  console.log(x, y);
}
log('Hello') // Hello World
log('Hello', 'China') // Hello China
log('Hello', '') // Hello World
改进：//y在没有赋值的时候赋默认值
function log(x, y) {
  if (typeof y === 'undefined') {
   y = y || 'World';
  }
  console.log(x, y);
}
log('Hello', '') // Hello

Es6：---函数的参数设置默认值，即直接写在参数定义的后面， 参数变量是默认声明的，所以不能用let或const再次声明
function log(x, y = 'World') {
  console.log(x, y);
}
log('Hello') // Hello World
log('Hello', 'China') // Hello China
log('Hello', '') // Hello

function Point(x = 0, y = 0) {
  this.x = x;
  this.y = y;
}

const p = new Point();
p // { x: 0, y: 0 }

参数变量是默认声明的，所以不能用let或const再次声明。
function foo(x = 5) {
  let x = 1; // error
  const x = 2; // error
}
---只使用了对象的解构赋值默认值，没有使用函数参数的默认值
function foo({x, y = 5}) {
  console.log(x, y);
}
foo({}) // undefined 5
foo({x: 1}) // 1 5
foo({x: 1, y: 2}) // 1 2
foo() // TypeError: Cannot read property 'x' of undefined
使用函数参数的默认值
function foo({x, y = 5} = {}) {
  console.log(x, y);
}

function fetch(url, { body = '', method = 'GET', headers = {} }) {
  console.log(method);
}
fetch('http://example.com', {})
// "GET"
fetch('http://example.com')
// 报错
foo() // undefined 5
function fetch(url, { body = '', method = 'GET', headers = {} } = {}) {
  console.log(method);
}
fetch('http://example.com')
// "GET"
---函数参数赋默认会有length失真
  (function (a) {}).length // 1
  (function (a = 5) {}).length // 0
  (function (a, b, c = 5) {}).length // 2
  (function(...args) {}).length // 0
  (function (a = 0, b, c) {}).length // 0
  (function (a, b = 1, c) {}).length // 1
