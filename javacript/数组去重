
数组 var arr=[1,1,1,3,3,3,6,6,7,9,5];
    
方法1--es6:使用new Set()把数组转化为不重复的Set对象，通过Array.from()转回数组
  var arr=[1,1,1,3,3,3,6,6,7,9,5];
  var  newArr=Array.from(new Set(arr));//[1, 3, 6, 7, 9, 5] 其中new Set(arr)//类数组但它是一个对象
    
  es6第二种:利用扩展运算符：
  let arr=[1,1,1,3,3,3,6,6,7,9,5];
  let resultarr = [...new Set(arr)]; //拓展运算符(...)内部使用for...of循环


方法2：es5
第一种：双层for循环，建立新数组。与旧数组比较，相同就跳过
Array.prototype.distinct=function(){
  var arr=this,
      newArr=[],//
      i,j,len=arr.length;
      for(i=0;i<len;i++){
        for(j=i+1;j<len;j++){//j从第2为开始遍历
            if(arr[i]===arr[j]){//相同的值跳过
              j=++i;
            }
        }
        newArr.push(arr[i]);
      }
return  newArr
}
第二种：
  最基本的去重方法：
思路：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中。
function unique(arr){
　　var res = [arr[0]];//定义一个新数组并存放第一位
　　for(var i=1;i<arr.length;i++){
　　　　var repeat = false;
　　　　for(var j=0;j<res.length;j++){
　　　　　　if(arr[i] == res[j]){//相等则跳出
　　　　　　　　repeat = true;
　　　　　　　　break;
　　　　　　}
　　　　}
　　　　if(!repeat){
　　　　　　res.push(arr[i]);
　　　　}
　　}
　　return res;
}
第三种：先排序在去重
思路：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组
function unique(arr){
　　var arr2 = arr.sort();//对原数组排序
　　var res = [arr2[0]];//定义一个新数组并存放第一位
　　for(var i=1;i<arr2.length;i++){//从第2位遍历
　　　　if(arr2[i] !== res[res.length-1]){
　　　　　　res.push(arr2[i]);
　　　　}
　　}
　　return res;
}
第四种：利用对象的属性去重（推荐）
思路：每次取出原数组的元素，然后再对象中访问这个属性，如果存在就说明重复
function unique(arr){
　　var res =[];
　　var json = {};
　　for(var i=0;i<arr.length;i++){
　　　　if(!json[arr[i]]){
　　　　　　res.push(arr[i]);
　　　　　　json[arr[i]] = 1;//随便数字值
　　　　}
　　}
　　return res;
}
第五种：利用下标查询
  function unique(arr){
   　　var newArr = [arr[0]];
  　　 for(var i=1;i<arr.length;i++){
　　　　if(newArr.indexOf(arr[i]) == -1){
          　　 newArr.push(arr[i]);
    　　  }
        }
        return newArr;
   }
   
 ------以下两种不建新数组  
   不建新数组：直接在原数组基础上删除
第六种： 利用splice直接在原数组进行操作--
          双层for循环，外层循环元素，内层循环时比较值值相同时，则删去这个值

注意点:删除元素之后，需要将数组的长度也减1.  
   Array.prototype.distinct = function (){
         var arr = this,
          i,
          j,
          len = arr.length;
         for(i = 0; i < len; i++){
          for(j = i + 1; j < len; j++){
           if(arr[i] == arr[j]){
            arr.splice(j,1);
            len--;
            j--;
           }
          }
         }
         return arr;
    };
var a = [1,2,3,4,5,6,5,3,2,4,56,4,1,2,1,1,1,1,1,1,];
var b = a.distinct();
console.log(b.toString()); //1,2,3,4,5,6,56
第七种：数组递归去重运用--递归的思想，先排序，然后从最后开始比较，遇到相同，则删除
Array.prototype.distinct = function (){
       var arr = this,
        len = arr.length;
       arr.sort(function(a,b){  //对数组进行排序才能方便比较
        return a - b;
       })
     function loop(index){
      if(index >= 1){
       if(arr[index] === arr[index-1]){
        arr.splice(index,1);
       }
       loop(index - 1); //递归loop函数进行去重
      }
     }
     loop(len-1);
     return arr;
    };
var a = [1,2,3,4,5,6,5,3,2,4,56,4,1,2,1,1,1,1,1,1,56,45,56];
var b = a.distinct();
console.log(b.toString());  //1,2,3,4,5,6,45,56
