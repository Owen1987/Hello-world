封装：信息隐藏 
方式：命名空间  成员（静态  ）

命名空间
var   ns1={};
ns1.ns11={};
ns1.module1={name:"asdf",m:function(){}}

ns1.module1.name;
ns1.ns11.module2={name2:"asdfdd",m2:function(){}}}

成员 ：静态
  function  Person(name,age){//是类又是对象
        this.name = name; 
  } 
 Person.useTools=true;//当作对象可加 静态成员
 var p1=new Person();//创建实例
 注意：此时p1是访问不了useTools的，因为useTools是静态成员
 
成员：公有   私有
function  Person(name){//是类又是对象
       var age = 100;//私有
       function pm(){
       console.log("private mmethod");
       }//私有
        this.name = name; //公有
        this.test=function(){//公有
         console.log("public mmethod");
        }
  } 
//公有里面调用私有
function  Person(pname){//是类又是对象
       var age = 100;//私有
       function pm(){
       console.log(this.name);
       }//私有
        this.name = pname; //公有
        this.test=function(){//公有
         console.log("public mmethod");
          //pm();//这时调用的this 指向全局了
          pm.call(this);
        }
  } 
  
  var  p1= new Person('cj');
    p1.test();// public mmethod  cj
  
//公有里面调用私有（对象工厂）
 function  Person(pname){
      function  pm(){
        console.log(self.name);
      }
      var  self = {
            name:pname,
            test:function(){
              pm();
            }
        };
      return self;
 }
var  p2= new Person('cj');
    p2.test();//cj
 

