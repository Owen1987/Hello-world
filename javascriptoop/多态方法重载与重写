多态：方法重载  方法重写
方法重载：js方法不能重名，若重名，后面的方法会覆盖前面的方法，所以需要模拟重载

<p id="js">this is for js</p>

function demo(a,b){
   console.log(demo.length);//形参个数
   console.log(argument.length);//实参个数argument是类似数组的对象有length属性，通过下标访问
   console.log(argument[0]);
   console.log(argument[1]);
   argument[0]= //argument一般只读，不推荐修改它(用它的东西，不该它的东西)  
}
demo(4,5,6);

模拟重载：
可变长度的实现
function add(){
var  total=0
  for(var i=arguments.length-1;i>=0;i--){
  total+=arguments[i];
  }
return total
}
console.log(add(2,3))
console.log(add(2,3,5))

参数个数:
function fontSize(){
  var ele=document.getElementById("js");
  if(arguments.length==0){
     
      return   ele.style.fontSize;
  }else{
     ele.style.fontSize=argument[0];
  }
}
fontSize(18);
console.log(fontSize())

参数的类型：传值red fontsize  传对象{bac: fontsize:}
function  setting(){
   var ele=document.getElementById("js");
   if(typeof arguments[0]==="object"){
      for(p in argument[0]){
         ele.style[p]=arguments[0][p];
      }
   }else{
       ele.style.fontSize = arguments[0];
       ele.style.backgroundColor= arguments[1];
   }
}
setting(18,"red");
setting(fontSize:20,backgroundColor:"green");

--运行时多态 （方法重写）
1.
function demo(o){
  o.run();
}
var o={run:function(){
  console.log("o  is  running...");
}};
demo(o);
var p={run:function(){
  console.log("p  is  running...");
}};
demo(p);
2.
function F(){};
f=new F();
F.prototype.run=function(){
  console.log("F")
}
f.run();//F
---
f.run()=function(){
console.log("fff")
}
f.run();//fff
-----
f.run()=function(){
   F.prototype.run();//调用父的东西
}
f.run();//  fff  F
3.
function Parent(){
  this.run=function(){
    console.log("parent  is runing")
  }
}

function Child(){
    Parent.call(this);
    var parentRun = this.run;
    this.run =function(){
       console.log("child  is running..");
       parentRun();//选择性的调用父类
    }
}
var c=new Child();
c.run();

4.最复杂的
function Parent(){
}
Parent.prototype.run=function(){
  console.log("parent");
}
Child.prototype=Object.create(Parent.prototype);
Child.prototype.constructor=Child;
Child.super=Parent.prototype;
function Child(){}
Child.prototype.run=function(){
 console.log("child  is runing。。");
 Child.super.run();
 }
 
 var c=new  Child();
 c.run;
