创建一样的对象:
第一种：复制代码
  var o={name:"cj",age:12}
  var o2={name:"david",age:33};
 第二种：对象工厂
 function PersonFactory(pname.age){
    return {
      name:pname,
      age:page,
    //  headCount:1 //对象共有的东西用工厂函数不可取,会耗内存
    }
 }
 var p1 = PersonFactory("cj",22);
 var p2 = PersonFactory("david",33);
 
 
 构造器函数：解决对象工厂不能共有的问题
 
 function  Person(){//创建类
     var age = 30;//私有，这个不能用p.age读出来
     this.age = 22;
     this.name = "cj";
 }
 Person.prototype.headCount=1;//对象共用的
 var p = new Person();//创建实例对象
 var p2= new Person();//创建实例对象
 
 prototype属性： 函数才有prototype
typeof Person.prototype;//"object"
p.headCount;//1
p.constructor.prototype.headCount;//1

javascript的类 是伪类
p.constructor;//function Person()
p.constructor={name:33}
p.name;//"cj"  ,不会变成33
p.headCount;//2 ，不会消失
__proto__:只有对象有，不是标准
p.__proto__;//__proto__指向prototype对象

Person.prototype={xx:"xx"};
p.xx;//undefined
var p2=new Person();
p2.xx;//"xx"
