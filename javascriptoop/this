this写在哪里：全局   函数
指向什么？书写在哪里？决定this指向的值的基本原则
this永远指向 的是对象;

this.name="fdf";//全局window对象，this指向不变
---函数内三种情况---指向会变，谁调用指向谁
function  f(){
  this.name = "asdfas";
}

var o={
    name:"cj",
    print:function(){
      console.log(this.name);//指向o对象
    }
}
var ff=o.print;
    ff();// undefined,js的this运行时候决定，此时this指向window，不指向o，ff()-->window.ff()

var  ele =document.getelmentById('id');
   ele.addEventListener('click',function(){
     console.log(this);//指向ele的dom元素对象，this的指向是稳定不变的
   })


----call  apply    bind
this.name="global";
this.age=22;
log("name","age");//global  22
log.call(o,"name","age");//cj ,undefined
log.apply(o,["name","age"]);//cj ,undefined
//call动态的添加属性
function p(){
   this.name="111";
}
var o={};
p.call(o);//等价o.p();
o.name;//"111" ，动态的为添加了一个name属性

---new自定义实现
 
function Person(name,age){
  this.name=name;
  this.age=age;
}
var p1=new Person("cj","22");

---实现New
   function New(f){//f  是构造器函数，
       //var o={"__proto__":f.prototype}; //写这里实例会指向同一个对象，改一个实例的对象属性，会影响另一个实例对象
     return  function(){
          var o={"__proto__":f.prototype};
            //  o.name=arguments[0];
            //  o.age=arguments[1];
            f.apply(o,arguments);//等价  o.f()
           
          return  o;
     }   
   }
   测试  var p2=New(Person)("cj",22);

