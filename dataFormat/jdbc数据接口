java平台与数据库交互的接口
package Conncect1;
//与数据库建立连接
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
public class Connect {
   //加载驱动器
	String diver="com.mysql.jdbc.Driver";
	
	static{
	try{
	Class.forName("diver");
	}catch(ClassNotFoundException e){
		e.printStackTrace();
	      }
	}
	//创建连接，连接数据库）端口号，数据库名，数据库账号和密码）
		public Connection getConnection() throws SQLException{
			return (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/myschool","root","root");
		}
		//获取结果集 
		public ResultSet getReusltset(String sql,Object[] param) throws SQLException{
			PreparedStatement ps = (PreparedStatement) getConnection().prepareStatement(sql);
			for(int i =0;param!=null&&i<param.length;i++){
				ps.setObject(i+1, param[i]);
			}
			ResultSet rs = ps.executeQuery();
			return rs;
		}
		
		
		//删除 修改 增添
		public int exeCommand(String sql, Object[] params) throws SQLException{
			Connection conn = getConnection();
			PreparedStatement ps = (PreparedStatement) conn.prepareStatement(sql);
			//给参数赋值
			try {
				for(int i = 0;params != null && i<params.length;i++){
					ps.setObject(i + 1, params[i]);
					// 为什么这里不是setString而是setObject?
					// 答：在Java中一切都是对象。因为代码需要通用性 。
				}
				// 连接对象可以不用关闭 ，因为他是一个局部变量，方法使用完后会释放资源。
				// 但这种关闭的方法具有滞后性，有Java垃圾回收器不定期来清理。
				return ps.executeUpdate();
			} finally {
				ps.close();//立即清理资源，具有很强的实时性。
				conn.close();
			}
			
		}
	
	
}

详解：
public class DBhelper {

	/**
	 * 数据库帮助类
	 * @param args
	 * 1.抽取公共的代码2.对查询的方法进行封装3.对添加、删除、更新的操作进行封装
	 * 4.将数据库连接信息定义为一个常量来看待5、驱动只需加载一次，使用静态语句实现
	 * 6.封装数据库连接，获取连接对象
	 * 
	 */
	//常量使用大写书写
	private final static String URL="jdbc:mysql://localhost:3306/myschool" ;
	private final static String USERNAME="root";
	private final static String USERPASSWORD="root";
	static{
		try {
			Class.forName("com.mysql.jdbc.Driver");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} 
	}
/**
 * 2.获取连接，用私有方法，限定在本类使用，
 * @throws SQLException 
 * 
 * */
	private Connection getConnection() throws SQLException{
		return (Connection) DriverManager.getConnection(URL, USERNAME, USERPASSWORD);
	}
	
	// 思考一个问题，参数该怎么写才能满足各种查询，带参数或不带参数
		/**
		 * 3.通用的查询方法
		 * 
		 * @param sql
		 *            查询sql语句
		 * @param params
		 *            sql语句的参数值
		 * @return 结果集
		 * @throws SQLException
		 */
	public ResultSet getResult(String sql,Object[] params) throws SQLException{
		Connection con=getConnection();
		PreparedStatement ps=con.prepareStatement(sql);
		//给参数赋值
		for (int i = 0;params!=null && i < params.length; i++) {
		     ps.setObject(i+1,params[i]);	
		}
		//注意这里是不能关闭连接对象的，因为通过ResultSet对象读取数据的时候需要连接对象  。
		return ps.executeQuery();
	}
	/**
	 * 4.通用数据库的操作方法（添加、删除、更新）
	 * @throws SQLException 
	 * 
	 * */
	 public int exeCommand(String sql,Object[] params) throws SQLException{
		 Connection con=getConnection();
		 PreparedStatement ps=con.prepareStatement(sql); 
		 //给参数赋值
		try{ 
		 for (int i = 0;params!=null && i < params.length; i++) {
						     ps.setObject(i+1,params[i]);	
		}
		 return ps.executeUpdate();
  }finally{
	ps.close();
	con.close();
  }
}
