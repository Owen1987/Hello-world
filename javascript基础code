1.解决js阻塞问题的代码--defer
      <!--defer属性的使用
            1.异步加载js文档，不会阻塞UI的渲染
            2.等待页面的对象构建完成后，按照出现的顺序执行。
            3.适用于外部js文件
          -->
      a.js：
          var sum=0;
          for(var i=0;i<1000000;i++){
            sum+=i;
          }
          console.log("a.js  sum="+sum);
      b.js：
          var sum=0;
          for(var i=0;i<100000000;i++){
            sum+=i;
          }
          console.log("b.js  sum="+sum);

      html：
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <title>JavaScript文档加载和执行顺序</title>
          <script src="js/b.js" defer></script>
          <script src="js/a.js" defer></script>
          <!--<script>
            alert("我内嵌的JS代码。");
          </script>-->
        </head>
        <body>
          <h1>JavaScript 按照文档顺序进行加载。</h1>		
        </body>
      </html>

2.使用严格模式--"use strict" 防止变量被污染，这样数据更安全
      <body>
          <script>
            "use strict";
            var myAge=10;  //严格模式如果不使用var就会报错了，不会有隐式全局变量的存在
            console.log(myAge);
            //1.获取加密的密钥信息
            //2.对加密的信息进行再次加密（）
            //3.将数据保存到客户端
            //4.检测是否过期
          </script>
        </body>
3.采用占位符输出，程序更简洁
      <script>
            var myname="老温";
            var addr="深圳";
            var work="程序员";
            //不用格式化 ，拼接容易出错的
            console.log("我是"+myname+",在"+addr+"做"+work);
            //采用占位符  %s--字符串  %d--整型   %f--小数
            console.log("我是%s,在%s做%s",myname,addr,work);
          </script>
4.函数的使用
   带参数：function show( a, b){// 方法的参数不能使用var关键字，参数可以有n个
				console.log(a);
				console.log(b);
				console.log(arguments);
			}
  arguments获取参数：------这个很好使用的！！！！
    function abount(){//看似没有参数，哈哈，js就是可以做到的喔
        console.log("方法的参数如下：");
            for(var i=0;i<arguments.length;i++){
              console.log(arguments[i]);
              }}
        abount(a,b,c);
	函数的调用方式：
	a.//var myFunc=表达式；
        var myFunc=function(){
              console.log("OK");
			  };
	b.//即时函数：函数定义后之后立即执行,这样就形成一个私有的作用域。jq使用的很多喔
       (function(){
            console.log("立即执行")
          })();			
    c.在事件上调用
        window.onload=function(){
            console.log("窗体加载完成！");
          };
			
   d.通过在链接上调用
       <script>
        function abount(){
          alert("关于我们");
			}
			window.onclick=abount;//点击窗体，调用方法。
		</script>
		<a href="javascript:abount()">关于我们</a>
		<a href="javascript:void(0)">没有任何内容</a>
 5.对象的使用：
  使用对象封装数据：对象的字面量形式
      var teacher = {
				     name: "jack",
				    show: function() {
				  	console.log(this.name);
				    }
			}
			//获取对象的属性
			console.log(teacher.name);
			//调用方法
			teacher.show();
			
6.拷贝与添加属性
    var array=[10,20,30,"alert",99.9];
          //
          var myObj={};//空对象
          for(var tempObj in array){
             myObj[tempObj]=array[tempObj];//完成了成员的拷贝。
          }
          myObj.aa="bb"; //添加属性
          myObj["ss"]="cc";//添加属性
          console.log(myObj);	
7.使用数组解析数据
 	7.1/*以下过程称之为数据解析*/
			var array = [];
			array["广东省"] = ["广州市", "深圳市", "东莞市"];
			array["湖南省"] = ["长沙市", "湘潭市", "株洲市"];
			for(var temp in array){//遍历属性
				console.log(temp);//输出属性，即省名
				var cities=array[temp];//所有的城市，是一个数组
				var len=cities.length;
				for (var i=0;i<len;i++) {
					console.log("\t"+cities[i]);
				}
			}
	7.11数据解析，省，市，区联动
	     
7.2解析URL查询参数信息-------解析url
//比如需要解析的URL：   https://search.jd.com/Search?keyword=%E9%A9%BE%E8%80%83%E5%AE%9D%E5%85%B8&enc=utf-8&suggest=2.def.0.T01&wq=jiakaobao&pvid=86835c3062854c9d8bead54dd8ef1edf
function getQueryInfo(){
  // location.search    search 属性是一个可读可写的字符串，可设置或返回当前 URL 的查询部分（问号 ? 之后的部分）。
 var qs=location.search?location.search.substring(1):"", //如果有就截取，没有置空
     //需要返回的对象信息
     args={},
     //解析出使用&分隔的参数信息
     items=qs?qs.split("&"):[], 
     i=0,
     len=items.length;
     //使用循环遍历，解析key value
     for(;i<len;i++){
      var item=items[i].split("=");
      var key=item[0]; //这边一般不需要编码码的，= 的左边一般是英文
      var val=decodeURI(decodeURIComponent(item[1]));
     		 if(key){
      			args[key]=val;  //给对象args的每个key属性赋值 
      			}
      }
       return args;
}		
	getQueryInfo();//调用即可看到输出 		
			
8.日期的使用
    var date=new Date();//以当前系统的时间来构造日期对象	
    var myDate=new Date("2017-5-4");//构造指定的时间		
    var milDate=new Date(1000*60);	//以毫秒数1970-1-1 08:01:00      自 1970-1-1 8:0:0  		
    var datePart=new Date(2017,4,10,16,53);	//以日期部分构造，，这里是五月，月份西方以0开始的

9.计算日期差
  function reduce(start,end) {
				var date1 = new Date(start);
				var date2 = new Date(end)
				var long = date2.getTime() - date1.getTime() - 8 * 60 * 60 * 1000; //getTime()是获取的毫秒时间， 发现日期是从 1970-1-1 8:00:00 开始为了方便计算，减去8个小时
				//  2000-1-1 12:0:0   2001-2-4 10:0:4
				//1-2-3 1:0:4 

				var endDate = new Date(long); //距离1970-1-1 0:0:0 的时间，毫秒数
				var startDate = new Date("1970-1-1 0:0:0");//因为long已经减掉了8小时，所以，这个起始时间也是从1970-1-1 0:0:0
				console.log("相差：%d年%d月%d日 %d时%d分%d秒", endDate.getFullYear() - startDate.getFullYear(),
					endDate.getMonth() - startDate.getMonth(),
					endDate.getDate() - startDate.getDate(),
					endDate.getHours() - startDate.getHours(),
					endDate.getMinutes() - startDate.getMinutes(),
					endDate.getSeconds() - startDate.getSeconds()
				);

			};
			reduce("2000-5-6 10:30:00","2017-5-6 12:30:00");//输出相差：17年0月0日 2时0分0秒
10.打开窗体，跳转页面  window.open	
 function openWin(){
			 	window.open("http://zx.ke.qq.com","win","fullscreen=1;");//实现了跳转
			 }	
function close_win(){
			 	window.close();
			 }
html:
<input type="button" onclick="openWin()" value="打开窗体" />
<input type="button" onclick="close_win()" value="关闭窗体" />

-------页面之间的传值
11.页面之间的传输：方法很多，URL   cookie 以及h5客户端存储都可以
 使用cookie进行页面间传值（从第一个传递到第二个页面）
 第一个页面：cookie-demo
<input id="txtName" />
		<input type="button" value="保存" onclick="saveText()" />
		<script>
		   function saveText(){
		   	var txtName=document.getElementById("txtName");
		   	var strName=txtName.value; //获取到输入的内容,这个是需要传递到另一个页面显示的内容
		   	var date=new Date("2018-2-2");//cookie时间设置死，让它到2018-2-2
		   //以上strName date以可以储存到cookie
		   document.cookie="myname=" + strName + ";expires=" + date.toUTCString() + ";path='/'";
		   // window.open("cookie-show.html"); //打开显示页面
		   }
		</script>
第二个页面：cookie-show.html
<span id="spInfo"></span>
		<script type="text/javascript">
			var spInfo=document.getElementById("spInfo");
			function getCookie(){
				var myName=getKey("myname");
				spInfo.innerText=myName;
			}
			
			function getKey(key){
				var data=document.cookie;
				var findStr=key+"=";//cookie是以key=value来存储的 ，findStr+"=" ,自动转化成字符串
				//找到key的位置：
				var index=data.indexOf(findStr); 
				if(index==-1)
				    return null;
				var subStr=data.substring(index+findStr.length);
				var lastIndex=subStr.indexOf(";");
				  if(lastIndex==-1){
				  	   return subStr;
				  }else{
				  	   return subStr.substring(0,lastIndex);
				  }
			}
			   setInterval(getCookie,1000);
		</script>		

第二种方法：使用url 参数传值
第一页：
 <input id="txtName" />
 <button onclick="sendQuery()">参数传值</button>
		<script>
			function sendQuery(){
				var txtName = document.getElementById("txtName");
				var strName = txtName.value;
				 strName=encodeURIComponent(strName);
				var url="getquerystring.html?myname="+strName;
			//	location.href=url; //在当窗口打开另一页
				window.open(url,"cookie"); //另起窗口打开另一页
			}
		</script>
另一页：		
<span id="spInfo"></span>
		<script type="text/javascript">
			var spInfo=document.getElementById("spInfo");
			var args=getQueryArguments();
			     spInfo.innerText=args.myname;
			//获取参数信息
			function getQueryArguments(){
				//获取url参数
				var qs=location.search?location.search.substring(1):"",
				args={},
				params=qs.length?qs.split("&"):[],
				i=0,
				len=params.length;
				for(;i<len;i++){
					var item=params[i].split("=");
					var key=decodeURI(decodeURIComponent(item[0]));
					var value=decodeURI(decodeURIComponent(item[1]));
					if(key){
						args[key]=value;
					}
					
				}
				return args;
				
			}
		</script>		
html5 web存储：


12.两种定时器的用法：setTimeout("调用函数","指定的时间后") setInteval("调用的函数", "指定的时间间隔")
 //计时器执行的函数
   function show(arg){console.log(arg);}
   function show(arg){console.log(arg);setTimeout(show,1000,{name:"laowen",age:"26",weight:"60kg"})}//再调用，构成循环
 //调用函数，两种形式
   setTimeout(show,1000,{name:"laowen",age:"26",weight:"60kg"});----推荐使用
   setTimeout("show({name:'laowen',age:26,weight:'60kg'})",1000);//主要注意引号
13.setInteval("调用的函数", "指定的时间间隔")
有bug，不能连续点击
 <div>
    <input type="button" onclick="start()" value="启动"/>
    <button onclick="pause()">暂停</button>
    <button onclick="_continue">继续</button>
 </div> 
 <div><span id="spRes">0</span></div>
   var spRes=document.getElementById("spRes");
   var interval=undefined;
   var count=0;
   function start(){interval=setInterval(counter,1000);}
   function pause(){clearInterval();}
   function _continue(){start();}
   function counter(){count++;spRes.innerText=count;}
更改bug后的代码：js代码
<script>
			var spRes = document.getElementById("spRes");
			var intervals = 0;
			var count = 0;
			var interval;
			//程序有bug，点击start再点击继续，随着重复点击，计数会跑的越来越快(已经解决)
			function start() {
				clearInterval(interval);
				interval = setInterval(counter, 1000);
				$("button").eq(0).attr("disabled", false)
				intervals = 1;//增加条件，用来解决那个bug的

			}

			function pause() {
				$("button").eq(1).attr("disabled", false)
				clearInterval(interval);
				intervals = 1;
			}

			function _continue() {
				if(intervals == 1) {
					start();
				}
				intervals++
			}

			function counter() {
				count++;
				spRes.innerText = count;
			}
		</script>
<script src="jquery-3.2.0.js"></script>

14.动态创建节点（通过先创建节点，最后渲染到根父级的，提高性能）
<div id="main">
<!--<ul><li><a href="zx.ke.qq.com">智学无忧</a></li>
		<li><a href="zx.ke.qq.com">智学无忧2</a></li>
	</ul>-->
		</div>
<script>
		//动态创建节点、添加节点之间的关系、节点属性（）
		//1.创建 文档片段 createDocumentFragment---这种方式代码允许效率较高
		var root = document.createDocumentFragment();
		var ul = document.createElement("ul");
		var i = 0,
			len = 100000;
	console.time("fragment");//与console.timeEnd("fragment");测试他们之间的代码运行时间
		for(; i < len; i++) {
			var li_1 = document.createElement("li");
			var a_1 = document.createElement("a");
			a_1.innerText = "智学无忧" + i;
			a_1.href = "http://zx.ke.qq.com";
			li_1.append(a_1);
			root.append(li_1);
		}
		//先在内存维护他们的关系，不要渲染	 （优化了性能）
		ul.append(root);
		//最后渲染到页面
		var mainDiv = document.querySelector("#main");
		mainDiv.append(ul);
	console.timeEnd("fragment");
	</script>
</body>
//共用上述的html，不使用createDocumentFragment，采用了最后渲染到页面的方式，代码的执行效率同样很高
<script>
		//动态创建节点、添加节点之间的关系、节点属性
		//1.创建ul标签
		var ul = document.createElement("ul");
		var i = 0,
			len = 100000;
		console.time("normal");
		for(; i < len; i++) {
			var li_1 = document.createElement("li");
			var a_1 = document.createElement("a");
			a_1.innerText = "智学无忧" + i;
			a_1.href = "http://zx.ke.qq.com";
			li_1.append(a_1);
			ul.append(li_1);
		}
		//最后渲染到页面
		var mainDiv = document.querySelector("#main");
		mainDiv.append(ul);
		console.timeEnd("normal");
	</script>
	
15.动态集合NodeList和HTMLCollection：
  <div id="wrapper">
		  	   <p>动态集合的使用</p>
		  	   <p>HTMLCollection和NodeList</p>  
		  </div>
		  <div>
		  	  <input id="txtName" />
		  	  <input  type="button" value="显示" onclick="Person.show()"  />
		  </div>
	 <script>
		  	  var　wrapper=document.getElementById("wrapper");
		  	  var ps=document.getElementsByTagName("p");
		  	  var age=10;
		  	  var Person={
		  	  name:document.getElementById("txtName").value,
		  	  	dynName:function(){return document.getElementById("txtName").value},//这是一个动态属性，可以通过方法赋不同的值
		  	  	show:function(){
		  	  		alert(this.name);//这个就是一般的Nodelist
		  	  		alert(this.dynName()); 
		  	  	}		  	  	
		  	  }
	 </script>
16.动态属性2（注意动态属性容易出错的地方）
       <div>第一个Div</div>
		<script>
			var divs=document.getElementsByTagName("div");
			var len=divs.length;//这里是关键，如果直接在循环里i<divs.length,会死循环。因为循环之后divs.length 一直在累加的
			for(var i=0;i<len;i++){//只循环一次吗？
				var div=document.createElement("div");
				document.body.appendChild(div);
				alert(i);
			}
			</script>
17.js操作样式
 </style>
 #main{
            color: blue;
            background-color: red;//这个不能执行，因为有行内样式，行内样式优先级高
        }
   </style>
    <div id="main" style="background-color: gray;float: left;">使用js操作样式 </div>
<script>
    //IE支持的属性
    var main =document.getElementById("main");
    //获取背景的样式，注意：属性名称采用驼峰命名
    //var bgColor=main.currentStyle.backgroundColor;//IE支持
    //获取main对象的样式、把内部样式blue渲染文字
    var mainStyle=window.getComputedStyle(main);  
</script>


18.通用代码，任意元素与Body的距离（方法1，使用while循环，改变offsetParent）
  <div class="outer"><div class="inner"> </div></div>
<table>
    <tr>
        <td>a</td>
    </tr>
    <tr>
        <td id="td">b</td>
    </tr>
</table>
<script>
   /**
 * 获取左边距
 * @param el 要计算的元素对象
 * 算法1：使用while循环，改变offsetParent
 */
var td = document.getElementById("td");//计算td到body的距离
function getOffsetLeft(el) {
	
    var left = el.offsetLeft;//获取元素的左边距
    var root = el.offsetParent;
    while (root) {//true：表示有offsetParent（还有父对象）
        left += root.offsetLeft;
        root = root.offsetParent;
    }
    return left;
}

	getOffsetLeft(td);	 
</script>
算法2
/**
 * 获取左边距（采用递归算法）
 * @param el  要计算的元素对象
 * @returns {number|Number}
 */
<script>
var td = document.getElementById("td");//计算td到body的距离
function getOffsetLeft2(el) {
    var left = el.offsetLeft;
    if (el.offsetParent) {
        left += getOffsetLeft2(el.offsetParent);
    }
    return left;
}
	getOffsetLeft(td);	 
</script>


19.随机滚动的元素（div）-- 问题点：移动到窗体下端或者右边滚动条会出现
<style type="text/css">
        #adv {
            width: 200px;
            height: 200px;
            background-color: gray;
            position: absolute;
        }

        body {
            margin: 0px;
            padding: 0px;
        }
    </style>
</head>
<body>
<div id="adv" style="left: 0;top: 0"></div>
<script>
    var adv = document.getElementById("adv"),
        //每次移动的距离
        step = 5,
        advHeight = adv.offsetHeight,
        advWidth = adv.offsetWidth,
        //垂直移动的方向
        moveH = true,  //垂直方向  true:表示向下   false：向上
        moveV = true,// 水平方向,  true:向右  false:向左
        // 获取窗体的 高度
        wHeight = window.innerHeight,
        wWidth = window.innerWidth
    ;
    setInterval(function () {//让div动起来     

        //×的高度+偏移量
        var advTop = adv.offsetTop + advHeight;
        var advLeft = adv.offsetLeft + advWidth;

        //浮动层左边距
        var _left = parseFloat(adv.style.left);
        //浮动层的上边距
        var _top = parseFloat(adv.style.top);

        //根据方向做垂直移动操作
        if (moveH) {//向下移动
            _top += step;
            //保证不要超过窗体的高度
            _top = _top + advHeight > wHeight ? (moveH = false) || wHeight - advHeight : _top;
        } else {//向上移动
            _top = _top <= 0 ? !(moveH = true) || 0 : _top - step;
        }

        //根据方向做水平移动操作
        if (moveV) {//向右移动
            _left += step;
            _left = _left + advWidth > wWidth ? (moveV = false) || wWidth - advWidth : _left;
        } else {//向移左边 ,这种代码只是炫耀技术，并代码可读性不好。
            _left = _left <= 0 ? !(moveV = true) || 0 : _left - step;
        }

        /*   if (advLeft >= wWidth) {//移动的方向向上
         moveV = false;
         }

         if (adv.offsetLeft <= 0) {
         moveV = true;
         }*/

        //重新定位
        adv.style.left = _left + "px";
        adv.style.top = _top + "px";


    }, 50);

    //窗体大小改变事件（屏幕宽度变了，不会影响div的移动效果的）
    window.onresize = function () {
        wHeight = window.innerHeight;
        wWidth = window.innerWidth;
    }
    
    
 20.表格的操作
  <style type="text/css">
        input[value="确定"],input[value="取消"]{
            display: none;
        }
    </style>
</head>
<body>
<table id="tab" border="1" align="center" width="600">
    <thead>
    <tr>
        <th>序号</th>
        <th>商品名称</th>
        <th>价格</th>
        <th>操作</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>1</td>
        <td>电脑</td>
        <td>3000</td>
        <td>
            <input type="button" value="删除" > <!--html和js分离-->
            <input type="button" value="修改" onclick="TablePage.modifyProduct(this)">
            <input type="button" value="取消" onclick="TablePage.cancelEdit(this)">
            <input type="button" value="确定" onclick="TablePage.edit(this)">
        </td>
    </tr>
    </tbody>
    <tfoot>
    <tr>
        <td colspan="4" align="center">
            <input type="button" value="增加订单" onclick="TablePage.addRow()">

        </td>
    </tr>
    </tfoot>
</table>
<script src="table.js"></script>
</body>
table.js：
var TablePage = {
    tab: null,//表格对象
    tbody: null,
    //初始化对象信息
    init: function () {
        this.tab = document.getElementById("tab");
        this.tbody = tab.querySelector("tbody");
        //动态添加事件
        var btnsDelete = this.tbody.querySelectorAll("input[value='删除']");
        var i = 0, len = btnsDelete.length;
        for (; i < len; i++) {
            btnsDelete[i].addEventListener("click", function (btn) {
                TablePage.removeRow(this);
            }, false);
        }


    },
    addRow: function () {//增加一行 //使用对象的创建的方式
        var tr = document.createElement("tr");
        //2.1使用innerHTML
        tr.innerHTML = ' <td>1</td> ' +
            '<td>电脑</td> ' +
            '<td>3000</td>' +
            '<td><input type="button" value="删除" onclick="TablePage.removeRow(this)"> <input type="button" value="修改" onclick="TablePage.modifyProduct(this)">  <input type="button" value="取消" onclick="ablePage.cancelEdit(this)"> <input type="button" onclick="TablePage.edit(this)" value="确定">' +
            '</td>';
        //2.2采用对象的方式
        //var td1 = document.createElement("td");
        /* var td1 =tr.insertCell();
         td1.innerText = "2";
         tr.appendChild(td1);
         */

        this.tbody.append(tr);
    },
    removeRow: function (btn) {
        var res = confirm("确定要删除吗？");
        if (res) {
            //移除行
            var delRow = btn.parentNode.parentNode;
            this.tbody.removeChild(delRow);
        }
    },
    modifyProduct: function (btn) {
        //1.获取要操作的单元格
        var tr = btn.parentNode.parentNode;
        var td = tr.cells[1];
        //2.获取单元格的内容
        var proname = td.innerText;
        //3.动态插入文本框 //4.单元格的内容赋值给文本框 //5.单元格的内清空
        td.innerHTML = "<input value='" + proname + "'  data-old='" + proname + "'/>";
        // 6. 删除按钮、修改按钮隐藏
        btn.style.display = "none";
        var btnDel = btn.parentNode.querySelector("input[value='删除']");
        btnDel.style.display = "none";
        // 7. 取消按钮、确定按钮显示

        var btnCancel = btn.parentNode.querySelector("input[value='取消']");
        btnCancel.style.display = "inline-block";

        var btnOK = btn.parentNode.querySelector("input[value='确定']");
        btnOK.style.display = "inline-block";
    },
    //取消修改i啊
    cancelEdit: function (btn) {
        //1.将单元格原来的内容，显示在单元格上
        //1.1 获取要操作的单元格
        var tr = btn.parentNode.parentNode;
        var td = tr.cells[1];
        //1.2 获取文本框的内容
        var txtProName = td.querySelector("input");
        //2.获取文本框自定义属性的内容
        var oldValue = txtProName.getAttribute("data-old");
        //3.修改单元格的内容
        td.innerText = oldValue;
        // 4. 取消按钮、确定按钮隐藏
        btn.style.display = "none";
        var btnOK = btn.parentNode.querySelector("input[value='确定']");
        btnOK.style.display = "none";

        // 7. 取消按钮、确定按钮显示
        var btnModify = btn.parentNode.querySelector("input[value='修改']");
        btnModify.style.display = "inline-block";
        var btnDel = btn.parentNode.querySelector("input[value='删除']");
        btnDel.style.display = "inline-block";


    },
    edit: function (btn) {
        //1.将单元格原来的内容，显示在单元格上
        //1.1 获取要操作的单元格
        var tr = btn.parentNode.parentNode;
        var td = tr.cells[1];
        //1.2 获取文本框的内容
        var txtProName = td.querySelector("input");
        //2.获取文本框的内容
        var oldValue = txtProName.value;
        //3.修改单元格的内容
        td.innerText = oldValue;
        // 4. 取消按钮、确定按钮隐藏
        btn.style.display = "none";
        var btnCancel = btn.parentNode.querySelector("input[value='取消']");
        btnCancel.style.display = "none";

        // 7. 取消按钮、确定按钮显示
        var btnModify = btn.parentNode.querySelector("input[value='修改']");
        btnModify.style.display = "inline-block";
        var btnDel = btn.parentNode.querySelector("input[value='删除']");
        btnDel.style.display = "inline-block";
    }

};
window.onload = function () {
    TablePage.init();
};
