原型，new，闭包
构造器函数(FF(){})有一个prototype，构造的对象（ff=new FF()）有一个隐藏的__proto__;
原型：FF.prototype(通常指这个)   ff.__proto__（这个有些浏览器不支持）
提出原型的目的：3个目的
   
   1.通过构造器函数new一个对象，通过原型把默认的共同的东西放到原型里面，达到省内存的目的
   2.实现继承的前提
    function F(){} var f=new F();
    f.__proto__;//F{}  f.__proto__.__proto__;//{Objec}   f.__proto__.__proto__.__proto__;//null
   3.早期js没有类，只为了进行DOM操作，js的类都是用对象模拟的
  function Person(name,age){
    this.name = name;
    this.age =age;
  }
  var p1=new Person("cj",22);
  --模拟new
  function  New(f){
  //  var o = {"__proto__":f.prototype};//
   return  function{
     var o = {"__proto__":f.prototype};//
     f.apply(o,arguments);
     return o;
   }
  }
  
  p2= New(Person)("cj",22);//  var o = {"__proto__":f.prototype};的放置位置无差别
  
  //var o = {"__proto__":f.prototype};放上面修改p2或者p3 ，p2 和p3相互影响
  var temp = New(Person);
  var p2 = temp("11",11);
  var p3 = temp("22",22);
  
  原型链：
    通过原型链的方式实现继承
    var p ={name: "cj"}
    function myCreate(p){
      var  ins;
      function F(){};
      F.prototype = p;
      ins =new F();
      return ins;
    }
    
   ----把函数当成类来使用分析原型链
    对象：两种形式构建---其中function Foo()是用户创建的，function Object()function Function()是js自带
    第一种通过函数new出来
     function  Foo(){};f= new Foo();
     原型链：Object.prototype为顶级对象
       f.__proto__===Foo.proptotype;Foo.prototype.__proto__===Object.prototype;Object.prototype__proto__===null;
    
    第二种：对象字面量或new Object（）
     f={};
     f=new Object();
     原型链：Object.prototype顶级对象
        f.__proto__===Object.prototype;Object.prototype__proto__===null;
  ----把函数当成对象来分析原型链
  function  Foo()的__proto__指向Function prototype,Function prototypede的__proto__指向Object.prototype
  function Object()的__proto__指向Function prototype,Function prototypede的__proto__指向Object.prototype
  function Function()的__proto__指向Function prototype,Function prototypede的__proto__指向Object.prototype
  
  --从constructor（构造器）层面，构造器的顶级是function Function();
   function Foo()的constructor指向function Function();
   function Object()的constructor指向function Function();
   function Function()的constructor指向本身function Function();
   f的constructor指向function Foo();
   f的constructorfunction Object();
   
   
