版本管理工具
svn  grunt  git webpack等

svn--是集中式代码版本管理工具,需要连接互联网，受网速影响
  集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，
  再把自己的活推送给中央服务器。
git--是分布式代码管理工具
分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。
既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间
只需把各自的修改推送给对方，就可以互相看到对方的修改了。
在实际使用分布式版本控制系统的时候，其实很少在两人之间的电脑上推送版本库的修改，因为可能你们俩不在一个局域网内，两台电脑互相访问不了，也可能今天
你的同事病了，他的电脑压根没有开机。因此，分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，
没有它大家也一样干活，只是交换修改不方便而已。
git教程推荐网址：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
window下载https://pan.baidu.com/s/1kU5OCOB#list/path=%2Fpub%2Fgit
window下安装Git:
  1.选择目标盘，安装Git，
  2.打开，设置命令：因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。
   git config --global user.name "Owen"
   git config --global user.email "490303930@qq.com"
 3.创建版本库
   mkdir learngit    ---learngit 为创建的版本库名称，用户自定义
   cd learngit
   pwd             ----显示当前目录，仓库在 /Users/michael/learngit
  /Users/michael/learngit
4.git init    ---把这个目录变成Git可以管理的仓库，如果没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。
Initialized empty Git repository in /Users/michael/learngit/.git/
5.把文件添加到版本库--
-----所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等而图片、视频这些二进制文件，虽然也能由版本控制系统管理，
但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道
----千万不要使用Windows自带的记事本编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地
在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，
都是由记事本的弱智行为带来的。建议你下载Notepad++代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可：
 
 步骤：1.编写一个.txt文件，放在/learngit目录下
 readme.txt:
 Git is a version control system.
 Git is free software.
第一步，用命令git add告诉Git，把文件添加到仓库：
  Git add readme.txt
 第二步，用命令git commit告诉Git，把文件提交到仓库：
  git commit -m "wrote a readme file"   ---m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。
 也可以一次添加多个文件
 git add file1.txt
 git add file2.txt file3.txt
 git commit -m "add 3 files."
 
 第二部分：时光机穿梭
  版本回退：
    修改readme.txt:
     Git is a distributed version control system.
     Git is free software distributed under the GPL
     提交：
     git add readme.txt
     git commit -m "append GPL"
     查看结果：告诉哪个文件被改了 
     git status
     查看具体改变的内容：
     git diff readme.txt 
     git log ：穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
     git log --pretty=oneline  ：输出信息较多时使用
     
     回退版本：
      git reset --hard HEAD^  回退到上一个版本
      git reset --hard HEAD^^ 回退到上上一个版本
      git reset --hardHEAD~100 上100个版本
      找回最新版本，通过命令窗口前面的git log 的id前面几位数即可 ：
      git reset --hard 3628164
      关掉电脑，找不到commit id，可以通过
      git relog   --要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
      
      管理修改：
      第一次修改 -> git add -> 第二次修改 -> git commit   第二次修改不会提交，因为文件需要先放入到暂存区才能被提交到工作区
      第一次修改 -> git add -> 第二次修改 -> git add -> git commit    ----这个全部都提交到了工作区
      撤销修改：
      git checkout -- readme.txt    这个是已经commit了，

      git reset HEAD readme.txt     在commit前，把暂存区的修改回退到工作区
      删除文件
      git add test.txt
      rm test.txt ----删除文件
       git checkout -- test.txt    ---误删时恢复
       
   第三部分：
   远程仓库
   
   第四部分：
   分支管理
   第五部分：
   标签管理
   第六部分：
   自定义Git
