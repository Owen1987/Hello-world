创建父类 创建子类  建立关系    通用继承方法与super

function P(){

}
function C(){
}
建立关系
 1.直接关系---C.prototype=P.prototype (子的东西会暴露给父，不推荐使用)
 2.C.prototype=new P();//会浪费内存，不推荐使用
 3.构建一个中间函数
  function F();
  F.prototype=P.prototype;
  var f=new F();
  C.prototype=f;
  
 类继承的四部曲与Constructor修正
 C.prototype.constructor;//function P()
     第一部：创建父类
     function Person(pname,page){
       this.name =pname;
       this.age=page;
     }
     person.prototype.headCount=1;
     person.prototype.eat=function(){
        console.log("eating...")
     }
     第二部：创建子类
      function  Programer(pname,page,title){
       Person.apply(this,arguments);//把父类的实例成员调用过来
      }
     第三部：继承关系和修正，一般情况下不做修正会有小影响，统一修正一下会比较好
      Programer.prototype=Object.create(Person.prototype);//继承父，这里Programer.prototype.constructor指向父的原型对象Person.prototype
      Programer.prototype.constructor=Programmer;//Constructor修正，这里Programer.prototype.constructor指向回自己的原型对象Programer.prototype
     // createEx(Programer,Person);//用createEx函数取代上面两句
     第四部：给子类添加成员(一定放这后面，不然被第三部重写)
      Programer.prototype.language="javascript";
      Programer.work=function(){
        console.log("writing  code in "+this.language);
       
       Programmer.base.eat();//--跟super 实现子调父的东西
      }

通用继承方法与super
 function createEx(Child,Parent){//取代第三部的两句代码
   function F(){};
   F.prototype=Parent.prototype;
   Child.prototype=new F();
   Child.prototype.construtor=Child;
   
   Child.super=Child.base=Parent.prototype;//--跟base
 }
